/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ganqiang.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ganqiang.thrift.Job;

public class Job implements org.apache.thrift.TBase<Job, Job._Fields>, java.io.Serializable, Cloneable, Comparable<Job> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Job");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HTTP_PROXYS_FIELD_DESC = new org.apache.thrift.protocol.TField("httpProxys", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IN_USE_PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("inUseProxy", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField OUT_USE_PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("outUseProxy", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IN_SEEDS_FIELD_DESC = new org.apache.thrift.protocol.TField("inSeeds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField OUT_SEEDS_FIELD_DESC = new org.apache.thrift.protocol.TField("outSeeds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField IN_ISDOWNLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("inIsdownload", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField OUT_ISDOWNLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("outIsdownload", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField JS_SUPPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("jsSupport", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_CASCADE_FIELD_DESC = new org.apache.thrift.protocol.TField("isCascade", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField IN_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("inDelay", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField OUT_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("outDelay", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobTupleSchemeFactory());
  }

  public String id; // required
  public long interval; // optional
  public String startTime; // optional
  public List<String> httpProxys; // optional
  public boolean inUseProxy; // optional
  public boolean outUseProxy; // optional
  public List<String> inSeeds; // optional
  public List<String> outSeeds; // optional
  public boolean inIsdownload; // optional
  public boolean outIsdownload; // optional
  public boolean jsSupport; // optional
  public boolean isCascade; // optional
  public int depth; // optional
  public long inDelay; // optional
  public long outDelay; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    INTERVAL((short)2, "interval"),
    START_TIME((short)3, "startTime"),
    HTTP_PROXYS((short)4, "httpProxys"),
    IN_USE_PROXY((short)5, "inUseProxy"),
    OUT_USE_PROXY((short)6, "outUseProxy"),
    IN_SEEDS((short)7, "inSeeds"),
    OUT_SEEDS((short)8, "outSeeds"),
    IN_ISDOWNLOAD((short)9, "inIsdownload"),
    OUT_ISDOWNLOAD((short)10, "outIsdownload"),
    JS_SUPPORT((short)11, "jsSupport"),
    IS_CASCADE((short)12, "isCascade"),
    DEPTH((short)13, "depth"),
    IN_DELAY((short)14, "inDelay"),
    OUT_DELAY((short)15, "outDelay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INTERVAL
          return INTERVAL;
        case 3: // START_TIME
          return START_TIME;
        case 4: // HTTP_PROXYS
          return HTTP_PROXYS;
        case 5: // IN_USE_PROXY
          return IN_USE_PROXY;
        case 6: // OUT_USE_PROXY
          return OUT_USE_PROXY;
        case 7: // IN_SEEDS
          return IN_SEEDS;
        case 8: // OUT_SEEDS
          return OUT_SEEDS;
        case 9: // IN_ISDOWNLOAD
          return IN_ISDOWNLOAD;
        case 10: // OUT_ISDOWNLOAD
          return OUT_ISDOWNLOAD;
        case 11: // JS_SUPPORT
          return JS_SUPPORT;
        case 12: // IS_CASCADE
          return IS_CASCADE;
        case 13: // DEPTH
          return DEPTH;
        case 14: // IN_DELAY
          return IN_DELAY;
        case 15: // OUT_DELAY
          return OUT_DELAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERVAL_ISSET_ID = 0;
  private static final int __INUSEPROXY_ISSET_ID = 1;
  private static final int __OUTUSEPROXY_ISSET_ID = 2;
  private static final int __INISDOWNLOAD_ISSET_ID = 3;
  private static final int __OUTISDOWNLOAD_ISSET_ID = 4;
  private static final int __JSSUPPORT_ISSET_ID = 5;
  private static final int __ISCASCADE_ISSET_ID = 6;
  private static final int __DEPTH_ISSET_ID = 7;
  private static final int __INDELAY_ISSET_ID = 8;
  private static final int __OUTDELAY_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INTERVAL,_Fields.START_TIME,_Fields.HTTP_PROXYS,_Fields.IN_USE_PROXY,_Fields.OUT_USE_PROXY,_Fields.IN_SEEDS,_Fields.OUT_SEEDS,_Fields.IN_ISDOWNLOAD,_Fields.OUT_ISDOWNLOAD,_Fields.JS_SUPPORT,_Fields.IS_CASCADE,_Fields.DEPTH,_Fields.IN_DELAY,_Fields.OUT_DELAY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HTTP_PROXYS, new org.apache.thrift.meta_data.FieldMetaData("httpProxys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IN_USE_PROXY, new org.apache.thrift.meta_data.FieldMetaData("inUseProxy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OUT_USE_PROXY, new org.apache.thrift.meta_data.FieldMetaData("outUseProxy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_SEEDS, new org.apache.thrift.meta_data.FieldMetaData("inSeeds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OUT_SEEDS, new org.apache.thrift.meta_data.FieldMetaData("outSeeds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IN_ISDOWNLOAD, new org.apache.thrift.meta_data.FieldMetaData("inIsdownload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OUT_ISDOWNLOAD, new org.apache.thrift.meta_data.FieldMetaData("outIsdownload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JS_SUPPORT, new org.apache.thrift.meta_data.FieldMetaData("jsSupport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_CASCADE, new org.apache.thrift.meta_data.FieldMetaData("isCascade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_DELAY, new org.apache.thrift.meta_data.FieldMetaData("inDelay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUT_DELAY, new org.apache.thrift.meta_data.FieldMetaData("outDelay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Job.class, metaDataMap);
  }

  public Job() {
    this.inUseProxy = false;

    this.outUseProxy = false;

    this.inIsdownload = false;

    this.outIsdownload = true;

    this.jsSupport = false;

    this.isCascade = false;

    this.depth = 1;

    this.inDelay = 0L;

    this.outDelay = 0L;

  }

  public Job(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Job(Job other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.interval = other.interval;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetHttpProxys()) {
      List<String> __this__httpProxys = new ArrayList<String>(other.httpProxys);
      this.httpProxys = __this__httpProxys;
    }
    this.inUseProxy = other.inUseProxy;
    this.outUseProxy = other.outUseProxy;
    if (other.isSetInSeeds()) {
      List<String> __this__inSeeds = new ArrayList<String>(other.inSeeds);
      this.inSeeds = __this__inSeeds;
    }
    if (other.isSetOutSeeds()) {
      List<String> __this__outSeeds = new ArrayList<String>(other.outSeeds);
      this.outSeeds = __this__outSeeds;
    }
    this.inIsdownload = other.inIsdownload;
    this.outIsdownload = other.outIsdownload;
    this.jsSupport = other.jsSupport;
    this.isCascade = other.isCascade;
    this.depth = other.depth;
    this.inDelay = other.inDelay;
    this.outDelay = other.outDelay;
  }

  public Job deepCopy() {
    return new Job(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setIntervalIsSet(false);
    this.interval = 0;
    this.startTime = null;
    this.httpProxys = null;
    this.inUseProxy = false;

    this.outUseProxy = false;

    this.inSeeds = null;
    this.outSeeds = null;
    this.inIsdownload = false;

    this.outIsdownload = true;

    this.jsSupport = false;

    this.isCascade = false;

    this.depth = 1;

    this.inDelay = 0L;

    this.outDelay = 0L;

  }

  public String getId() {
    return this.id;
  }

  public Job setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getInterval() {
    return this.interval;
  }

  public Job setInterval(long interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public Job setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public int getHttpProxysSize() {
    return (this.httpProxys == null) ? 0 : this.httpProxys.size();
  }

  public java.util.Iterator<String> getHttpProxysIterator() {
    return (this.httpProxys == null) ? null : this.httpProxys.iterator();
  }

  public void addToHttpProxys(String elem) {
    if (this.httpProxys == null) {
      this.httpProxys = new ArrayList<String>();
    }
    this.httpProxys.add(elem);
  }

  public List<String> getHttpProxys() {
    return this.httpProxys;
  }

  public Job setHttpProxys(List<String> httpProxys) {
    this.httpProxys = httpProxys;
    return this;
  }

  public void unsetHttpProxys() {
    this.httpProxys = null;
  }

  /** Returns true if field httpProxys is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpProxys() {
    return this.httpProxys != null;
  }

  public void setHttpProxysIsSet(boolean value) {
    if (!value) {
      this.httpProxys = null;
    }
  }

  public boolean isInUseProxy() {
    return this.inUseProxy;
  }

  public Job setInUseProxy(boolean inUseProxy) {
    this.inUseProxy = inUseProxy;
    setInUseProxyIsSet(true);
    return this;
  }

  public void unsetInUseProxy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INUSEPROXY_ISSET_ID);
  }

  /** Returns true if field inUseProxy is set (has been assigned a value) and false otherwise */
  public boolean isSetInUseProxy() {
    return EncodingUtils.testBit(__isset_bitfield, __INUSEPROXY_ISSET_ID);
  }

  public void setInUseProxyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INUSEPROXY_ISSET_ID, value);
  }

  public boolean isOutUseProxy() {
    return this.outUseProxy;
  }

  public Job setOutUseProxy(boolean outUseProxy) {
    this.outUseProxy = outUseProxy;
    setOutUseProxyIsSet(true);
    return this;
  }

  public void unsetOutUseProxy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTUSEPROXY_ISSET_ID);
  }

  /** Returns true if field outUseProxy is set (has been assigned a value) and false otherwise */
  public boolean isSetOutUseProxy() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTUSEPROXY_ISSET_ID);
  }

  public void setOutUseProxyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTUSEPROXY_ISSET_ID, value);
  }

  public int getInSeedsSize() {
    return (this.inSeeds == null) ? 0 : this.inSeeds.size();
  }

  public java.util.Iterator<String> getInSeedsIterator() {
    return (this.inSeeds == null) ? null : this.inSeeds.iterator();
  }

  public void addToInSeeds(String elem) {
    if (this.inSeeds == null) {
      this.inSeeds = new ArrayList<String>();
    }
    this.inSeeds.add(elem);
  }

  public List<String> getInSeeds() {
    return this.inSeeds;
  }

  public Job setInSeeds(List<String> inSeeds) {
    this.inSeeds = inSeeds;
    return this;
  }

  public void unsetInSeeds() {
    this.inSeeds = null;
  }

  /** Returns true if field inSeeds is set (has been assigned a value) and false otherwise */
  public boolean isSetInSeeds() {
    return this.inSeeds != null;
  }

  public void setInSeedsIsSet(boolean value) {
    if (!value) {
      this.inSeeds = null;
    }
  }

  public int getOutSeedsSize() {
    return (this.outSeeds == null) ? 0 : this.outSeeds.size();
  }

  public java.util.Iterator<String> getOutSeedsIterator() {
    return (this.outSeeds == null) ? null : this.outSeeds.iterator();
  }

  public void addToOutSeeds(String elem) {
    if (this.outSeeds == null) {
      this.outSeeds = new ArrayList<String>();
    }
    this.outSeeds.add(elem);
  }

  public List<String> getOutSeeds() {
    return this.outSeeds;
  }

  public Job setOutSeeds(List<String> outSeeds) {
    this.outSeeds = outSeeds;
    return this;
  }

  public void unsetOutSeeds() {
    this.outSeeds = null;
  }

  /** Returns true if field outSeeds is set (has been assigned a value) and false otherwise */
  public boolean isSetOutSeeds() {
    return this.outSeeds != null;
  }

  public void setOutSeedsIsSet(boolean value) {
    if (!value) {
      this.outSeeds = null;
    }
  }

  public boolean isInIsdownload() {
    return this.inIsdownload;
  }

  public Job setInIsdownload(boolean inIsdownload) {
    this.inIsdownload = inIsdownload;
    setInIsdownloadIsSet(true);
    return this;
  }

  public void unsetInIsdownload() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INISDOWNLOAD_ISSET_ID);
  }

  /** Returns true if field inIsdownload is set (has been assigned a value) and false otherwise */
  public boolean isSetInIsdownload() {
    return EncodingUtils.testBit(__isset_bitfield, __INISDOWNLOAD_ISSET_ID);
  }

  public void setInIsdownloadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INISDOWNLOAD_ISSET_ID, value);
  }

  public boolean isOutIsdownload() {
    return this.outIsdownload;
  }

  public Job setOutIsdownload(boolean outIsdownload) {
    this.outIsdownload = outIsdownload;
    setOutIsdownloadIsSet(true);
    return this;
  }

  public void unsetOutIsdownload() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTISDOWNLOAD_ISSET_ID);
  }

  /** Returns true if field outIsdownload is set (has been assigned a value) and false otherwise */
  public boolean isSetOutIsdownload() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTISDOWNLOAD_ISSET_ID);
  }

  public void setOutIsdownloadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTISDOWNLOAD_ISSET_ID, value);
  }

  public boolean isJsSupport() {
    return this.jsSupport;
  }

  public Job setJsSupport(boolean jsSupport) {
    this.jsSupport = jsSupport;
    setJsSupportIsSet(true);
    return this;
  }

  public void unsetJsSupport() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JSSUPPORT_ISSET_ID);
  }

  /** Returns true if field jsSupport is set (has been assigned a value) and false otherwise */
  public boolean isSetJsSupport() {
    return EncodingUtils.testBit(__isset_bitfield, __JSSUPPORT_ISSET_ID);
  }

  public void setJsSupportIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JSSUPPORT_ISSET_ID, value);
  }

  public boolean isIsCascade() {
    return this.isCascade;
  }

  public Job setIsCascade(boolean isCascade) {
    this.isCascade = isCascade;
    setIsCascadeIsSet(true);
    return this;
  }

  public void unsetIsCascade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCASCADE_ISSET_ID);
  }

  /** Returns true if field isCascade is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCascade() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCASCADE_ISSET_ID);
  }

  public void setIsCascadeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCASCADE_ISSET_ID, value);
  }

  public int getDepth() {
    return this.depth;
  }

  public Job setDepth(int depth) {
    this.depth = depth;
    setDepthIsSet(true);
    return this;
  }

  public void unsetDepth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTH_ISSET_ID);
  }

  /** Returns true if field depth is set (has been assigned a value) and false otherwise */
  public boolean isSetDepth() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTH_ISSET_ID);
  }

  public void setDepthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTH_ISSET_ID, value);
  }

  public long getInDelay() {
    return this.inDelay;
  }

  public Job setInDelay(long inDelay) {
    this.inDelay = inDelay;
    setInDelayIsSet(true);
    return this;
  }

  public void unsetInDelay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDELAY_ISSET_ID);
  }

  /** Returns true if field inDelay is set (has been assigned a value) and false otherwise */
  public boolean isSetInDelay() {
    return EncodingUtils.testBit(__isset_bitfield, __INDELAY_ISSET_ID);
  }

  public void setInDelayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDELAY_ISSET_ID, value);
  }

  public long getOutDelay() {
    return this.outDelay;
  }

  public Job setOutDelay(long outDelay) {
    this.outDelay = outDelay;
    setOutDelayIsSet(true);
    return this;
  }

  public void unsetOutDelay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTDELAY_ISSET_ID);
  }

  /** Returns true if field outDelay is set (has been assigned a value) and false otherwise */
  public boolean isSetOutDelay() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTDELAY_ISSET_ID);
  }

  public void setOutDelayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTDELAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case HTTP_PROXYS:
      if (value == null) {
        unsetHttpProxys();
      } else {
        setHttpProxys((List<String>)value);
      }
      break;

    case IN_USE_PROXY:
      if (value == null) {
        unsetInUseProxy();
      } else {
        setInUseProxy((Boolean)value);
      }
      break;

    case OUT_USE_PROXY:
      if (value == null) {
        unsetOutUseProxy();
      } else {
        setOutUseProxy((Boolean)value);
      }
      break;

    case IN_SEEDS:
      if (value == null) {
        unsetInSeeds();
      } else {
        setInSeeds((List<String>)value);
      }
      break;

    case OUT_SEEDS:
      if (value == null) {
        unsetOutSeeds();
      } else {
        setOutSeeds((List<String>)value);
      }
      break;

    case IN_ISDOWNLOAD:
      if (value == null) {
        unsetInIsdownload();
      } else {
        setInIsdownload((Boolean)value);
      }
      break;

    case OUT_ISDOWNLOAD:
      if (value == null) {
        unsetOutIsdownload();
      } else {
        setOutIsdownload((Boolean)value);
      }
      break;

    case JS_SUPPORT:
      if (value == null) {
        unsetJsSupport();
      } else {
        setJsSupport((Boolean)value);
      }
      break;

    case IS_CASCADE:
      if (value == null) {
        unsetIsCascade();
      } else {
        setIsCascade((Boolean)value);
      }
      break;

    case DEPTH:
      if (value == null) {
        unsetDepth();
      } else {
        setDepth((Integer)value);
      }
      break;

    case IN_DELAY:
      if (value == null) {
        unsetInDelay();
      } else {
        setInDelay((Long)value);
      }
      break;

    case OUT_DELAY:
      if (value == null) {
        unsetOutDelay();
      } else {
        setOutDelay((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case INTERVAL:
      return Long.valueOf(getInterval());

    case START_TIME:
      return getStartTime();

    case HTTP_PROXYS:
      return getHttpProxys();

    case IN_USE_PROXY:
      return Boolean.valueOf(isInUseProxy());

    case OUT_USE_PROXY:
      return Boolean.valueOf(isOutUseProxy());

    case IN_SEEDS:
      return getInSeeds();

    case OUT_SEEDS:
      return getOutSeeds();

    case IN_ISDOWNLOAD:
      return Boolean.valueOf(isInIsdownload());

    case OUT_ISDOWNLOAD:
      return Boolean.valueOf(isOutIsdownload());

    case JS_SUPPORT:
      return Boolean.valueOf(isJsSupport());

    case IS_CASCADE:
      return Boolean.valueOf(isIsCascade());

    case DEPTH:
      return Integer.valueOf(getDepth());

    case IN_DELAY:
      return Long.valueOf(getInDelay());

    case OUT_DELAY:
      return Long.valueOf(getOutDelay());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case INTERVAL:
      return isSetInterval();
    case START_TIME:
      return isSetStartTime();
    case HTTP_PROXYS:
      return isSetHttpProxys();
    case IN_USE_PROXY:
      return isSetInUseProxy();
    case OUT_USE_PROXY:
      return isSetOutUseProxy();
    case IN_SEEDS:
      return isSetInSeeds();
    case OUT_SEEDS:
      return isSetOutSeeds();
    case IN_ISDOWNLOAD:
      return isSetInIsdownload();
    case OUT_ISDOWNLOAD:
      return isSetOutIsdownload();
    case JS_SUPPORT:
      return isSetJsSupport();
    case IS_CASCADE:
      return isSetIsCascade();
    case DEPTH:
      return isSetDepth();
    case IN_DELAY:
      return isSetInDelay();
    case OUT_DELAY:
      return isSetOutDelay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Job)
      return this.equals((Job)that);
    return false;
  }

  public boolean equals(Job that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_interval = true && this.isSetInterval();
    boolean that_present_interval = true && that.isSetInterval();
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_httpProxys = true && this.isSetHttpProxys();
    boolean that_present_httpProxys = true && that.isSetHttpProxys();
    if (this_present_httpProxys || that_present_httpProxys) {
      if (!(this_present_httpProxys && that_present_httpProxys))
        return false;
      if (!this.httpProxys.equals(that.httpProxys))
        return false;
    }

    boolean this_present_inUseProxy = true && this.isSetInUseProxy();
    boolean that_present_inUseProxy = true && that.isSetInUseProxy();
    if (this_present_inUseProxy || that_present_inUseProxy) {
      if (!(this_present_inUseProxy && that_present_inUseProxy))
        return false;
      if (this.inUseProxy != that.inUseProxy)
        return false;
    }

    boolean this_present_outUseProxy = true && this.isSetOutUseProxy();
    boolean that_present_outUseProxy = true && that.isSetOutUseProxy();
    if (this_present_outUseProxy || that_present_outUseProxy) {
      if (!(this_present_outUseProxy && that_present_outUseProxy))
        return false;
      if (this.outUseProxy != that.outUseProxy)
        return false;
    }

    boolean this_present_inSeeds = true && this.isSetInSeeds();
    boolean that_present_inSeeds = true && that.isSetInSeeds();
    if (this_present_inSeeds || that_present_inSeeds) {
      if (!(this_present_inSeeds && that_present_inSeeds))
        return false;
      if (!this.inSeeds.equals(that.inSeeds))
        return false;
    }

    boolean this_present_outSeeds = true && this.isSetOutSeeds();
    boolean that_present_outSeeds = true && that.isSetOutSeeds();
    if (this_present_outSeeds || that_present_outSeeds) {
      if (!(this_present_outSeeds && that_present_outSeeds))
        return false;
      if (!this.outSeeds.equals(that.outSeeds))
        return false;
    }

    boolean this_present_inIsdownload = true && this.isSetInIsdownload();
    boolean that_present_inIsdownload = true && that.isSetInIsdownload();
    if (this_present_inIsdownload || that_present_inIsdownload) {
      if (!(this_present_inIsdownload && that_present_inIsdownload))
        return false;
      if (this.inIsdownload != that.inIsdownload)
        return false;
    }

    boolean this_present_outIsdownload = true && this.isSetOutIsdownload();
    boolean that_present_outIsdownload = true && that.isSetOutIsdownload();
    if (this_present_outIsdownload || that_present_outIsdownload) {
      if (!(this_present_outIsdownload && that_present_outIsdownload))
        return false;
      if (this.outIsdownload != that.outIsdownload)
        return false;
    }

    boolean this_present_jsSupport = true && this.isSetJsSupport();
    boolean that_present_jsSupport = true && that.isSetJsSupport();
    if (this_present_jsSupport || that_present_jsSupport) {
      if (!(this_present_jsSupport && that_present_jsSupport))
        return false;
      if (this.jsSupport != that.jsSupport)
        return false;
    }

    boolean this_present_isCascade = true && this.isSetIsCascade();
    boolean that_present_isCascade = true && that.isSetIsCascade();
    if (this_present_isCascade || that_present_isCascade) {
      if (!(this_present_isCascade && that_present_isCascade))
        return false;
      if (this.isCascade != that.isCascade)
        return false;
    }

    boolean this_present_depth = true && this.isSetDepth();
    boolean that_present_depth = true && that.isSetDepth();
    if (this_present_depth || that_present_depth) {
      if (!(this_present_depth && that_present_depth))
        return false;
      if (this.depth != that.depth)
        return false;
    }

    boolean this_present_inDelay = true && this.isSetInDelay();
    boolean that_present_inDelay = true && that.isSetInDelay();
    if (this_present_inDelay || that_present_inDelay) {
      if (!(this_present_inDelay && that_present_inDelay))
        return false;
      if (this.inDelay != that.inDelay)
        return false;
    }

    boolean this_present_outDelay = true && this.isSetOutDelay();
    boolean that_present_outDelay = true && that.isSetOutDelay();
    if (this_present_outDelay || that_present_outDelay) {
      if (!(this_present_outDelay && that_present_outDelay))
        return false;
      if (this.outDelay != that.outDelay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Job other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpProxys()).compareTo(other.isSetHttpProxys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpProxys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpProxys, other.httpProxys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInUseProxy()).compareTo(other.isSetInUseProxy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInUseProxy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inUseProxy, other.inUseProxy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutUseProxy()).compareTo(other.isSetOutUseProxy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutUseProxy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outUseProxy, other.outUseProxy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInSeeds()).compareTo(other.isSetInSeeds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInSeeds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inSeeds, other.inSeeds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutSeeds()).compareTo(other.isSetOutSeeds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutSeeds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outSeeds, other.outSeeds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInIsdownload()).compareTo(other.isSetInIsdownload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInIsdownload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inIsdownload, other.inIsdownload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutIsdownload()).compareTo(other.isSetOutIsdownload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutIsdownload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outIsdownload, other.outIsdownload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsSupport()).compareTo(other.isSetJsSupport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsSupport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsSupport, other.jsSupport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCascade()).compareTo(other.isSetIsCascade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCascade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCascade, other.isCascade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepth()).compareTo(other.isSetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, other.depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInDelay()).compareTo(other.isSetInDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inDelay, other.inDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutDelay()).compareTo(other.isSetOutDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outDelay, other.outDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Job(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetInterval()) {
      if (!first) sb.append(", ");
      sb.append("interval:");
      sb.append(this.interval);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetHttpProxys()) {
      if (!first) sb.append(", ");
      sb.append("httpProxys:");
      if (this.httpProxys == null) {
        sb.append("null");
      } else {
        sb.append(this.httpProxys);
      }
      first = false;
    }
    if (isSetInUseProxy()) {
      if (!first) sb.append(", ");
      sb.append("inUseProxy:");
      sb.append(this.inUseProxy);
      first = false;
    }
    if (isSetOutUseProxy()) {
      if (!first) sb.append(", ");
      sb.append("outUseProxy:");
      sb.append(this.outUseProxy);
      first = false;
    }
    if (isSetInSeeds()) {
      if (!first) sb.append(", ");
      sb.append("inSeeds:");
      if (this.inSeeds == null) {
        sb.append("null");
      } else {
        sb.append(this.inSeeds);
      }
      first = false;
    }
    if (isSetOutSeeds()) {
      if (!first) sb.append(", ");
      sb.append("outSeeds:");
      if (this.outSeeds == null) {
        sb.append("null");
      } else {
        sb.append(this.outSeeds);
      }
      first = false;
    }
    if (isSetInIsdownload()) {
      if (!first) sb.append(", ");
      sb.append("inIsdownload:");
      sb.append(this.inIsdownload);
      first = false;
    }
    if (isSetOutIsdownload()) {
      if (!first) sb.append(", ");
      sb.append("outIsdownload:");
      sb.append(this.outIsdownload);
      first = false;
    }
    if (isSetJsSupport()) {
      if (!first) sb.append(", ");
      sb.append("jsSupport:");
      sb.append(this.jsSupport);
      first = false;
    }
    if (isSetIsCascade()) {
      if (!first) sb.append(", ");
      sb.append("isCascade:");
      sb.append(this.isCascade);
      first = false;
    }
    if (isSetDepth()) {
      if (!first) sb.append(", ");
      sb.append("depth:");
      sb.append(this.depth);
      first = false;
    }
    if (isSetInDelay()) {
      if (!first) sb.append(", ");
      sb.append("inDelay:");
      sb.append(this.inDelay);
      first = false;
    }
    if (isSetOutDelay()) {
      if (!first) sb.append(", ");
      sb.append("outDelay:");
      sb.append(this.outDelay);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStandardSchemeFactory implements SchemeFactory {
    public JobStandardScheme getScheme() {
      return new JobStandardScheme();
    }
  }

  private static class JobStandardScheme extends StandardScheme<Job> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.interval = iprot.readI64();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HTTP_PROXYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.httpProxys = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.httpProxys.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setHttpProxysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IN_USE_PROXY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inUseProxy = iprot.readBool();
              struct.setInUseProxyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUT_USE_PROXY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.outUseProxy = iprot.readBool();
              struct.setOutUseProxyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IN_SEEDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.inSeeds = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.inSeeds.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setInSeedsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUT_SEEDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.outSeeds = new ArrayList<String>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  String _elem8;
                  _elem8 = iprot.readString();
                  struct.outSeeds.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setOutSeedsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IN_ISDOWNLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inIsdownload = iprot.readBool();
              struct.setInIsdownloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUT_ISDOWNLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.outIsdownload = iprot.readBool();
              struct.setOutIsdownloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JS_SUPPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.jsSupport = iprot.readBool();
              struct.setJsSupportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_CASCADE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCascade = iprot.readBool();
              struct.setIsCascadeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.depth = iprot.readI32();
              struct.setDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IN_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inDelay = iprot.readI64();
              struct.setInDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OUT_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outDelay = iprot.readI64();
              struct.setOutDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Job struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInterval()) {
        oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.interval);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.httpProxys != null) {
        if (struct.isSetHttpProxys()) {
          oprot.writeFieldBegin(HTTP_PROXYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.httpProxys.size()));
            for (String _iter9 : struct.httpProxys)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInUseProxy()) {
        oprot.writeFieldBegin(IN_USE_PROXY_FIELD_DESC);
        oprot.writeBool(struct.inUseProxy);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutUseProxy()) {
        oprot.writeFieldBegin(OUT_USE_PROXY_FIELD_DESC);
        oprot.writeBool(struct.outUseProxy);
        oprot.writeFieldEnd();
      }
      if (struct.inSeeds != null) {
        if (struct.isSetInSeeds()) {
          oprot.writeFieldBegin(IN_SEEDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inSeeds.size()));
            for (String _iter10 : struct.inSeeds)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outSeeds != null) {
        if (struct.isSetOutSeeds()) {
          oprot.writeFieldBegin(OUT_SEEDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outSeeds.size()));
            for (String _iter11 : struct.outSeeds)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInIsdownload()) {
        oprot.writeFieldBegin(IN_ISDOWNLOAD_FIELD_DESC);
        oprot.writeBool(struct.inIsdownload);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutIsdownload()) {
        oprot.writeFieldBegin(OUT_ISDOWNLOAD_FIELD_DESC);
        oprot.writeBool(struct.outIsdownload);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJsSupport()) {
        oprot.writeFieldBegin(JS_SUPPORT_FIELD_DESC);
        oprot.writeBool(struct.jsSupport);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsCascade()) {
        oprot.writeFieldBegin(IS_CASCADE_FIELD_DESC);
        oprot.writeBool(struct.isCascade);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepth()) {
        oprot.writeFieldBegin(DEPTH_FIELD_DESC);
        oprot.writeI32(struct.depth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInDelay()) {
        oprot.writeFieldBegin(IN_DELAY_FIELD_DESC);
        oprot.writeI64(struct.inDelay);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutDelay()) {
        oprot.writeFieldBegin(OUT_DELAY_FIELD_DESC);
        oprot.writeI64(struct.outDelay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobTupleSchemeFactory implements SchemeFactory {
    public JobTupleScheme getScheme() {
      return new JobTupleScheme();
    }
  }

  private static class JobTupleScheme extends TupleScheme<Job> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetInterval()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetHttpProxys()) {
        optionals.set(2);
      }
      if (struct.isSetInUseProxy()) {
        optionals.set(3);
      }
      if (struct.isSetOutUseProxy()) {
        optionals.set(4);
      }
      if (struct.isSetInSeeds()) {
        optionals.set(5);
      }
      if (struct.isSetOutSeeds()) {
        optionals.set(6);
      }
      if (struct.isSetInIsdownload()) {
        optionals.set(7);
      }
      if (struct.isSetOutIsdownload()) {
        optionals.set(8);
      }
      if (struct.isSetJsSupport()) {
        optionals.set(9);
      }
      if (struct.isSetIsCascade()) {
        optionals.set(10);
      }
      if (struct.isSetDepth()) {
        optionals.set(11);
      }
      if (struct.isSetInDelay()) {
        optionals.set(12);
      }
      if (struct.isSetOutDelay()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetInterval()) {
        oprot.writeI64(struct.interval);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetHttpProxys()) {
        {
          oprot.writeI32(struct.httpProxys.size());
          for (String _iter12 : struct.httpProxys)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetInUseProxy()) {
        oprot.writeBool(struct.inUseProxy);
      }
      if (struct.isSetOutUseProxy()) {
        oprot.writeBool(struct.outUseProxy);
      }
      if (struct.isSetInSeeds()) {
        {
          oprot.writeI32(struct.inSeeds.size());
          for (String _iter13 : struct.inSeeds)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetOutSeeds()) {
        {
          oprot.writeI32(struct.outSeeds.size());
          for (String _iter14 : struct.outSeeds)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetInIsdownload()) {
        oprot.writeBool(struct.inIsdownload);
      }
      if (struct.isSetOutIsdownload()) {
        oprot.writeBool(struct.outIsdownload);
      }
      if (struct.isSetJsSupport()) {
        oprot.writeBool(struct.jsSupport);
      }
      if (struct.isSetIsCascade()) {
        oprot.writeBool(struct.isCascade);
      }
      if (struct.isSetDepth()) {
        oprot.writeI32(struct.depth);
      }
      if (struct.isSetInDelay()) {
        oprot.writeI64(struct.inDelay);
      }
      if (struct.isSetOutDelay()) {
        oprot.writeI64(struct.outDelay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.interval = iprot.readI64();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.httpProxys = new ArrayList<String>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            String _elem17;
            _elem17 = iprot.readString();
            struct.httpProxys.add(_elem17);
          }
        }
        struct.setHttpProxysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inUseProxy = iprot.readBool();
        struct.setInUseProxyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outUseProxy = iprot.readBool();
        struct.setOutUseProxyIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.inSeeds = new ArrayList<String>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            String _elem20;
            _elem20 = iprot.readString();
            struct.inSeeds.add(_elem20);
          }
        }
        struct.setInSeedsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.outSeeds = new ArrayList<String>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            String _elem23;
            _elem23 = iprot.readString();
            struct.outSeeds.add(_elem23);
          }
        }
        struct.setOutSeedsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.inIsdownload = iprot.readBool();
        struct.setInIsdownloadIsSet(true);
      }
      if (incoming.get(8)) {
        struct.outIsdownload = iprot.readBool();
        struct.setOutIsdownloadIsSet(true);
      }
      if (incoming.get(9)) {
        struct.jsSupport = iprot.readBool();
        struct.setJsSupportIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isCascade = iprot.readBool();
        struct.setIsCascadeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.depth = iprot.readI32();
        struct.setDepthIsSet(true);
      }
      if (incoming.get(12)) {
        struct.inDelay = iprot.readI64();
        struct.setInDelayIsSet(true);
      }
      if (incoming.get(13)) {
        struct.outDelay = iprot.readI64();
        struct.setOutDelayIsSet(true);
      }
    }
  }

}

