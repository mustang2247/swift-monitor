/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ganqiang.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GlobalConfig implements org.apache.thrift.TBase<GlobalConfig, GlobalConfig._Fields>, java.io.Serializable, Cloneable, Comparable<GlobalConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GlobalConfig");

  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROTOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocal", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("threadNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HTTP_PROXYS_FIELD_DESC = new org.apache.thrift.protocol.TField("httpProxys", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DISK_FIELD_DESC = new org.apache.thrift.protocol.TField("disk", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("isSync", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SYNC_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("syncDomain", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DB_DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("dbDriver", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("dbUrl", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DB_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbUsername", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DB_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("dbPassword", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DB_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbPoolSize", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seqId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TOTAL_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNodes", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField HBASE_MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("hbaseMaster", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ZK_QUORUM_FIELD_DESC = new org.apache.thrift.protocol.TField("zkQuorum", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ZK_CLIENT_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("zkClientPort", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GlobalConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GlobalConfigTupleSchemeFactory());
  }

  public int port; // optional
  public String server; // optional
  public String protocal; // optional
  public int threadNum; // optional
  public List<String> httpProxys; // optional
  public String disk; // optional
  public boolean isSync; // optional
  public String syncDomain; // optional
  public String index; // optional
  public String dbDriver; // optional
  public String dbUrl; // optional
  public String dbUsername; // optional
  public String dbPassword; // optional
  public int dbPoolSize; // optional
  public int seqId; // optional
  public String address; // optional
  public int totalNodes; // optional
  public String hbaseMaster; // optional
  public String zkQuorum; // optional
  public int zkClientPort; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PORT((short)1, "port"),
    SERVER((short)2, "server"),
    PROTOCAL((short)3, "protocal"),
    THREAD_NUM((short)4, "threadNum"),
    HTTP_PROXYS((short)5, "httpProxys"),
    DISK((short)6, "disk"),
    IS_SYNC((short)7, "isSync"),
    SYNC_DOMAIN((short)8, "syncDomain"),
    INDEX((short)9, "index"),
    DB_DRIVER((short)10, "dbDriver"),
    DB_URL((short)11, "dbUrl"),
    DB_USERNAME((short)12, "dbUsername"),
    DB_PASSWORD((short)13, "dbPassword"),
    DB_POOL_SIZE((short)14, "dbPoolSize"),
    SEQ_ID((short)15, "seqId"),
    ADDRESS((short)16, "address"),
    TOTAL_NODES((short)17, "totalNodes"),
    HBASE_MASTER((short)18, "hbaseMaster"),
    ZK_QUORUM((short)19, "zkQuorum"),
    ZK_CLIENT_PORT((short)20, "zkClientPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PORT
          return PORT;
        case 2: // SERVER
          return SERVER;
        case 3: // PROTOCAL
          return PROTOCAL;
        case 4: // THREAD_NUM
          return THREAD_NUM;
        case 5: // HTTP_PROXYS
          return HTTP_PROXYS;
        case 6: // DISK
          return DISK;
        case 7: // IS_SYNC
          return IS_SYNC;
        case 8: // SYNC_DOMAIN
          return SYNC_DOMAIN;
        case 9: // INDEX
          return INDEX;
        case 10: // DB_DRIVER
          return DB_DRIVER;
        case 11: // DB_URL
          return DB_URL;
        case 12: // DB_USERNAME
          return DB_USERNAME;
        case 13: // DB_PASSWORD
          return DB_PASSWORD;
        case 14: // DB_POOL_SIZE
          return DB_POOL_SIZE;
        case 15: // SEQ_ID
          return SEQ_ID;
        case 16: // ADDRESS
          return ADDRESS;
        case 17: // TOTAL_NODES
          return TOTAL_NODES;
        case 18: // HBASE_MASTER
          return HBASE_MASTER;
        case 19: // ZK_QUORUM
          return ZK_QUORUM;
        case 20: // ZK_CLIENT_PORT
          return ZK_CLIENT_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __THREADNUM_ISSET_ID = 1;
  private static final int __ISSYNC_ISSET_ID = 2;
  private static final int __DBPOOLSIZE_ISSET_ID = 3;
  private static final int __SEQID_ISSET_ID = 4;
  private static final int __TOTALNODES_ISSET_ID = 5;
  private static final int __ZKCLIENTPORT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PORT,_Fields.SERVER,_Fields.PROTOCAL,_Fields.THREAD_NUM,_Fields.HTTP_PROXYS,_Fields.DISK,_Fields.IS_SYNC,_Fields.SYNC_DOMAIN,_Fields.INDEX,_Fields.DB_DRIVER,_Fields.DB_URL,_Fields.DB_USERNAME,_Fields.DB_PASSWORD,_Fields.DB_POOL_SIZE,_Fields.SEQ_ID,_Fields.ADDRESS,_Fields.TOTAL_NODES,_Fields.HBASE_MASTER,_Fields.ZK_QUORUM,_Fields.ZK_CLIENT_PORT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCAL, new org.apache.thrift.meta_data.FieldMetaData("protocal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("threadNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HTTP_PROXYS, new org.apache.thrift.meta_data.FieldMetaData("httpProxys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DISK, new org.apache.thrift.meta_data.FieldMetaData("disk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SYNC, new org.apache.thrift.meta_data.FieldMetaData("isSync", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SYNC_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("syncDomain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_DRIVER, new org.apache.thrift.meta_data.FieldMetaData("dbDriver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_URL, new org.apache.thrift.meta_data.FieldMetaData("dbUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("dbUsername", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("dbPassword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dbPoolSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("seqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_NODES, new org.apache.thrift.meta_data.FieldMetaData("totalNodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HBASE_MASTER, new org.apache.thrift.meta_data.FieldMetaData("hbaseMaster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZK_QUORUM, new org.apache.thrift.meta_data.FieldMetaData("zkQuorum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZK_CLIENT_PORT, new org.apache.thrift.meta_data.FieldMetaData("zkClientPort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GlobalConfig.class, metaDataMap);
  }

  public GlobalConfig() {
    this.isSync = true;

    this.dbPoolSize = 10;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GlobalConfig(GlobalConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.port = other.port;
    if (other.isSetServer()) {
      this.server = other.server;
    }
    if (other.isSetProtocal()) {
      this.protocal = other.protocal;
    }
    this.threadNum = other.threadNum;
    if (other.isSetHttpProxys()) {
      List<String> __this__httpProxys = new ArrayList<String>(other.httpProxys);
      this.httpProxys = __this__httpProxys;
    }
    if (other.isSetDisk()) {
      this.disk = other.disk;
    }
    this.isSync = other.isSync;
    if (other.isSetSyncDomain()) {
      this.syncDomain = other.syncDomain;
    }
    if (other.isSetIndex()) {
      this.index = other.index;
    }
    if (other.isSetDbDriver()) {
      this.dbDriver = other.dbDriver;
    }
    if (other.isSetDbUrl()) {
      this.dbUrl = other.dbUrl;
    }
    if (other.isSetDbUsername()) {
      this.dbUsername = other.dbUsername;
    }
    if (other.isSetDbPassword()) {
      this.dbPassword = other.dbPassword;
    }
    this.dbPoolSize = other.dbPoolSize;
    this.seqId = other.seqId;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    this.totalNodes = other.totalNodes;
    if (other.isSetHbaseMaster()) {
      this.hbaseMaster = other.hbaseMaster;
    }
    if (other.isSetZkQuorum()) {
      this.zkQuorum = other.zkQuorum;
    }
    this.zkClientPort = other.zkClientPort;
  }

  public GlobalConfig deepCopy() {
    return new GlobalConfig(this);
  }

  @Override
  public void clear() {
    setPortIsSet(false);
    this.port = 0;
    this.server = null;
    this.protocal = null;
    setThreadNumIsSet(false);
    this.threadNum = 0;
    this.httpProxys = null;
    this.disk = null;
    this.isSync = true;

    this.syncDomain = null;
    this.index = null;
    this.dbDriver = null;
    this.dbUrl = null;
    this.dbUsername = null;
    this.dbPassword = null;
    this.dbPoolSize = 10;

    setSeqIdIsSet(false);
    this.seqId = 0;
    this.address = null;
    setTotalNodesIsSet(false);
    this.totalNodes = 0;
    this.hbaseMaster = null;
    this.zkQuorum = null;
    setZkClientPortIsSet(false);
    this.zkClientPort = 0;
  }

  public int getPort() {
    return this.port;
  }

  public GlobalConfig setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getServer() {
    return this.server;
  }

  public GlobalConfig setServer(String server) {
    this.server = server;
    return this;
  }

  public void unsetServer() {
    this.server = null;
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return this.server != null;
  }

  public void setServerIsSet(boolean value) {
    if (!value) {
      this.server = null;
    }
  }

  public String getProtocal() {
    return this.protocal;
  }

  public GlobalConfig setProtocal(String protocal) {
    this.protocal = protocal;
    return this;
  }

  public void unsetProtocal() {
    this.protocal = null;
  }

  /** Returns true if field protocal is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocal() {
    return this.protocal != null;
  }

  public void setProtocalIsSet(boolean value) {
    if (!value) {
      this.protocal = null;
    }
  }

  public int getThreadNum() {
    return this.threadNum;
  }

  public GlobalConfig setThreadNum(int threadNum) {
    this.threadNum = threadNum;
    setThreadNumIsSet(true);
    return this;
  }

  public void unsetThreadNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNUM_ISSET_ID);
  }

  /** Returns true if field threadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadNum() {
    return EncodingUtils.testBit(__isset_bitfield, __THREADNUM_ISSET_ID);
  }

  public void setThreadNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNUM_ISSET_ID, value);
  }

  public int getHttpProxysSize() {
    return (this.httpProxys == null) ? 0 : this.httpProxys.size();
  }

  public java.util.Iterator<String> getHttpProxysIterator() {
    return (this.httpProxys == null) ? null : this.httpProxys.iterator();
  }

  public void addToHttpProxys(String elem) {
    if (this.httpProxys == null) {
      this.httpProxys = new ArrayList<String>();
    }
    this.httpProxys.add(elem);
  }

  public List<String> getHttpProxys() {
    return this.httpProxys;
  }

  public GlobalConfig setHttpProxys(List<String> httpProxys) {
    this.httpProxys = httpProxys;
    return this;
  }

  public void unsetHttpProxys() {
    this.httpProxys = null;
  }

  /** Returns true if field httpProxys is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpProxys() {
    return this.httpProxys != null;
  }

  public void setHttpProxysIsSet(boolean value) {
    if (!value) {
      this.httpProxys = null;
    }
  }

  public String getDisk() {
    return this.disk;
  }

  public GlobalConfig setDisk(String disk) {
    this.disk = disk;
    return this;
  }

  public void unsetDisk() {
    this.disk = null;
  }

  /** Returns true if field disk is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk() {
    return this.disk != null;
  }

  public void setDiskIsSet(boolean value) {
    if (!value) {
      this.disk = null;
    }
  }

  public boolean isIsSync() {
    return this.isSync;
  }

  public GlobalConfig setIsSync(boolean isSync) {
    this.isSync = isSync;
    setIsSyncIsSet(true);
    return this;
  }

  public void unsetIsSync() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSYNC_ISSET_ID);
  }

  /** Returns true if field isSync is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSync() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSYNC_ISSET_ID);
  }

  public void setIsSyncIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSYNC_ISSET_ID, value);
  }

  public String getSyncDomain() {
    return this.syncDomain;
  }

  public GlobalConfig setSyncDomain(String syncDomain) {
    this.syncDomain = syncDomain;
    return this;
  }

  public void unsetSyncDomain() {
    this.syncDomain = null;
  }

  /** Returns true if field syncDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncDomain() {
    return this.syncDomain != null;
  }

  public void setSyncDomainIsSet(boolean value) {
    if (!value) {
      this.syncDomain = null;
    }
  }

  public String getIndex() {
    return this.index;
  }

  public GlobalConfig setIndex(String index) {
    this.index = index;
    return this;
  }

  public void unsetIndex() {
    this.index = null;
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return this.index != null;
  }

  public void setIndexIsSet(boolean value) {
    if (!value) {
      this.index = null;
    }
  }

  public String getDbDriver() {
    return this.dbDriver;
  }

  public GlobalConfig setDbDriver(String dbDriver) {
    this.dbDriver = dbDriver;
    return this;
  }

  public void unsetDbDriver() {
    this.dbDriver = null;
  }

  /** Returns true if field dbDriver is set (has been assigned a value) and false otherwise */
  public boolean isSetDbDriver() {
    return this.dbDriver != null;
  }

  public void setDbDriverIsSet(boolean value) {
    if (!value) {
      this.dbDriver = null;
    }
  }

  public String getDbUrl() {
    return this.dbUrl;
  }

  public GlobalConfig setDbUrl(String dbUrl) {
    this.dbUrl = dbUrl;
    return this;
  }

  public void unsetDbUrl() {
    this.dbUrl = null;
  }

  /** Returns true if field dbUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDbUrl() {
    return this.dbUrl != null;
  }

  public void setDbUrlIsSet(boolean value) {
    if (!value) {
      this.dbUrl = null;
    }
  }

  public String getDbUsername() {
    return this.dbUsername;
  }

  public GlobalConfig setDbUsername(String dbUsername) {
    this.dbUsername = dbUsername;
    return this;
  }

  public void unsetDbUsername() {
    this.dbUsername = null;
  }

  /** Returns true if field dbUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetDbUsername() {
    return this.dbUsername != null;
  }

  public void setDbUsernameIsSet(boolean value) {
    if (!value) {
      this.dbUsername = null;
    }
  }

  public String getDbPassword() {
    return this.dbPassword;
  }

  public GlobalConfig setDbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
    return this;
  }

  public void unsetDbPassword() {
    this.dbPassword = null;
  }

  /** Returns true if field dbPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetDbPassword() {
    return this.dbPassword != null;
  }

  public void setDbPasswordIsSet(boolean value) {
    if (!value) {
      this.dbPassword = null;
    }
  }

  public int getDbPoolSize() {
    return this.dbPoolSize;
  }

  public GlobalConfig setDbPoolSize(int dbPoolSize) {
    this.dbPoolSize = dbPoolSize;
    setDbPoolSizeIsSet(true);
    return this;
  }

  public void unsetDbPoolSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DBPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field dbPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetDbPoolSize() {
    return EncodingUtils.testBit(__isset_bitfield, __DBPOOLSIZE_ISSET_ID);
  }

  public void setDbPoolSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DBPOOLSIZE_ISSET_ID, value);
  }

  public int getSeqId() {
    return this.seqId;
  }

  public GlobalConfig setSeqId(int seqId) {
    this.seqId = seqId;
    setSeqIdIsSet(true);
    return this;
  }

  public void unsetSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  /** Returns true if field seqId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  public void setSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQID_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public GlobalConfig setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public int getTotalNodes() {
    return this.totalNodes;
  }

  public GlobalConfig setTotalNodes(int totalNodes) {
    this.totalNodes = totalNodes;
    setTotalNodesIsSet(true);
    return this;
  }

  public void unsetTotalNodes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNODES_ISSET_ID);
  }

  /** Returns true if field totalNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNodes() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNODES_ISSET_ID);
  }

  public void setTotalNodesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNODES_ISSET_ID, value);
  }

  public String getHbaseMaster() {
    return this.hbaseMaster;
  }

  public GlobalConfig setHbaseMaster(String hbaseMaster) {
    this.hbaseMaster = hbaseMaster;
    return this;
  }

  public void unsetHbaseMaster() {
    this.hbaseMaster = null;
  }

  /** Returns true if field hbaseMaster is set (has been assigned a value) and false otherwise */
  public boolean isSetHbaseMaster() {
    return this.hbaseMaster != null;
  }

  public void setHbaseMasterIsSet(boolean value) {
    if (!value) {
      this.hbaseMaster = null;
    }
  }

  public String getZkQuorum() {
    return this.zkQuorum;
  }

  public GlobalConfig setZkQuorum(String zkQuorum) {
    this.zkQuorum = zkQuorum;
    return this;
  }

  public void unsetZkQuorum() {
    this.zkQuorum = null;
  }

  /** Returns true if field zkQuorum is set (has been assigned a value) and false otherwise */
  public boolean isSetZkQuorum() {
    return this.zkQuorum != null;
  }

  public void setZkQuorumIsSet(boolean value) {
    if (!value) {
      this.zkQuorum = null;
    }
  }

  public int getZkClientPort() {
    return this.zkClientPort;
  }

  public GlobalConfig setZkClientPort(int zkClientPort) {
    this.zkClientPort = zkClientPort;
    setZkClientPortIsSet(true);
    return this;
  }

  public void unsetZkClientPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZKCLIENTPORT_ISSET_ID);
  }

  /** Returns true if field zkClientPort is set (has been assigned a value) and false otherwise */
  public boolean isSetZkClientPort() {
    return EncodingUtils.testBit(__isset_bitfield, __ZKCLIENTPORT_ISSET_ID);
  }

  public void setZkClientPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZKCLIENTPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((String)value);
      }
      break;

    case PROTOCAL:
      if (value == null) {
        unsetProtocal();
      } else {
        setProtocal((String)value);
      }
      break;

    case THREAD_NUM:
      if (value == null) {
        unsetThreadNum();
      } else {
        setThreadNum((Integer)value);
      }
      break;

    case HTTP_PROXYS:
      if (value == null) {
        unsetHttpProxys();
      } else {
        setHttpProxys((List<String>)value);
      }
      break;

    case DISK:
      if (value == null) {
        unsetDisk();
      } else {
        setDisk((String)value);
      }
      break;

    case IS_SYNC:
      if (value == null) {
        unsetIsSync();
      } else {
        setIsSync((Boolean)value);
      }
      break;

    case SYNC_DOMAIN:
      if (value == null) {
        unsetSyncDomain();
      } else {
        setSyncDomain((String)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((String)value);
      }
      break;

    case DB_DRIVER:
      if (value == null) {
        unsetDbDriver();
      } else {
        setDbDriver((String)value);
      }
      break;

    case DB_URL:
      if (value == null) {
        unsetDbUrl();
      } else {
        setDbUrl((String)value);
      }
      break;

    case DB_USERNAME:
      if (value == null) {
        unsetDbUsername();
      } else {
        setDbUsername((String)value);
      }
      break;

    case DB_PASSWORD:
      if (value == null) {
        unsetDbPassword();
      } else {
        setDbPassword((String)value);
      }
      break;

    case DB_POOL_SIZE:
      if (value == null) {
        unsetDbPoolSize();
      } else {
        setDbPoolSize((Integer)value);
      }
      break;

    case SEQ_ID:
      if (value == null) {
        unsetSeqId();
      } else {
        setSeqId((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case TOTAL_NODES:
      if (value == null) {
        unsetTotalNodes();
      } else {
        setTotalNodes((Integer)value);
      }
      break;

    case HBASE_MASTER:
      if (value == null) {
        unsetHbaseMaster();
      } else {
        setHbaseMaster((String)value);
      }
      break;

    case ZK_QUORUM:
      if (value == null) {
        unsetZkQuorum();
      } else {
        setZkQuorum((String)value);
      }
      break;

    case ZK_CLIENT_PORT:
      if (value == null) {
        unsetZkClientPort();
      } else {
        setZkClientPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PORT:
      return Integer.valueOf(getPort());

    case SERVER:
      return getServer();

    case PROTOCAL:
      return getProtocal();

    case THREAD_NUM:
      return Integer.valueOf(getThreadNum());

    case HTTP_PROXYS:
      return getHttpProxys();

    case DISK:
      return getDisk();

    case IS_SYNC:
      return Boolean.valueOf(isIsSync());

    case SYNC_DOMAIN:
      return getSyncDomain();

    case INDEX:
      return getIndex();

    case DB_DRIVER:
      return getDbDriver();

    case DB_URL:
      return getDbUrl();

    case DB_USERNAME:
      return getDbUsername();

    case DB_PASSWORD:
      return getDbPassword();

    case DB_POOL_SIZE:
      return Integer.valueOf(getDbPoolSize());

    case SEQ_ID:
      return Integer.valueOf(getSeqId());

    case ADDRESS:
      return getAddress();

    case TOTAL_NODES:
      return Integer.valueOf(getTotalNodes());

    case HBASE_MASTER:
      return getHbaseMaster();

    case ZK_QUORUM:
      return getZkQuorum();

    case ZK_CLIENT_PORT:
      return Integer.valueOf(getZkClientPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PORT:
      return isSetPort();
    case SERVER:
      return isSetServer();
    case PROTOCAL:
      return isSetProtocal();
    case THREAD_NUM:
      return isSetThreadNum();
    case HTTP_PROXYS:
      return isSetHttpProxys();
    case DISK:
      return isSetDisk();
    case IS_SYNC:
      return isSetIsSync();
    case SYNC_DOMAIN:
      return isSetSyncDomain();
    case INDEX:
      return isSetIndex();
    case DB_DRIVER:
      return isSetDbDriver();
    case DB_URL:
      return isSetDbUrl();
    case DB_USERNAME:
      return isSetDbUsername();
    case DB_PASSWORD:
      return isSetDbPassword();
    case DB_POOL_SIZE:
      return isSetDbPoolSize();
    case SEQ_ID:
      return isSetSeqId();
    case ADDRESS:
      return isSetAddress();
    case TOTAL_NODES:
      return isSetTotalNodes();
    case HBASE_MASTER:
      return isSetHbaseMaster();
    case ZK_QUORUM:
      return isSetZkQuorum();
    case ZK_CLIENT_PORT:
      return isSetZkClientPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GlobalConfig)
      return this.equals((GlobalConfig)that);
    return false;
  }

  public boolean equals(GlobalConfig that) {
    if (that == null)
      return false;

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_server = true && this.isSetServer();
    boolean that_present_server = true && that.isSetServer();
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (!this.server.equals(that.server))
        return false;
    }

    boolean this_present_protocal = true && this.isSetProtocal();
    boolean that_present_protocal = true && that.isSetProtocal();
    if (this_present_protocal || that_present_protocal) {
      if (!(this_present_protocal && that_present_protocal))
        return false;
      if (!this.protocal.equals(that.protocal))
        return false;
    }

    boolean this_present_threadNum = true && this.isSetThreadNum();
    boolean that_present_threadNum = true && that.isSetThreadNum();
    if (this_present_threadNum || that_present_threadNum) {
      if (!(this_present_threadNum && that_present_threadNum))
        return false;
      if (this.threadNum != that.threadNum)
        return false;
    }

    boolean this_present_httpProxys = true && this.isSetHttpProxys();
    boolean that_present_httpProxys = true && that.isSetHttpProxys();
    if (this_present_httpProxys || that_present_httpProxys) {
      if (!(this_present_httpProxys && that_present_httpProxys))
        return false;
      if (!this.httpProxys.equals(that.httpProxys))
        return false;
    }

    boolean this_present_disk = true && this.isSetDisk();
    boolean that_present_disk = true && that.isSetDisk();
    if (this_present_disk || that_present_disk) {
      if (!(this_present_disk && that_present_disk))
        return false;
      if (!this.disk.equals(that.disk))
        return false;
    }

    boolean this_present_isSync = true && this.isSetIsSync();
    boolean that_present_isSync = true && that.isSetIsSync();
    if (this_present_isSync || that_present_isSync) {
      if (!(this_present_isSync && that_present_isSync))
        return false;
      if (this.isSync != that.isSync)
        return false;
    }

    boolean this_present_syncDomain = true && this.isSetSyncDomain();
    boolean that_present_syncDomain = true && that.isSetSyncDomain();
    if (this_present_syncDomain || that_present_syncDomain) {
      if (!(this_present_syncDomain && that_present_syncDomain))
        return false;
      if (!this.syncDomain.equals(that.syncDomain))
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (!this.index.equals(that.index))
        return false;
    }

    boolean this_present_dbDriver = true && this.isSetDbDriver();
    boolean that_present_dbDriver = true && that.isSetDbDriver();
    if (this_present_dbDriver || that_present_dbDriver) {
      if (!(this_present_dbDriver && that_present_dbDriver))
        return false;
      if (!this.dbDriver.equals(that.dbDriver))
        return false;
    }

    boolean this_present_dbUrl = true && this.isSetDbUrl();
    boolean that_present_dbUrl = true && that.isSetDbUrl();
    if (this_present_dbUrl || that_present_dbUrl) {
      if (!(this_present_dbUrl && that_present_dbUrl))
        return false;
      if (!this.dbUrl.equals(that.dbUrl))
        return false;
    }

    boolean this_present_dbUsername = true && this.isSetDbUsername();
    boolean that_present_dbUsername = true && that.isSetDbUsername();
    if (this_present_dbUsername || that_present_dbUsername) {
      if (!(this_present_dbUsername && that_present_dbUsername))
        return false;
      if (!this.dbUsername.equals(that.dbUsername))
        return false;
    }

    boolean this_present_dbPassword = true && this.isSetDbPassword();
    boolean that_present_dbPassword = true && that.isSetDbPassword();
    if (this_present_dbPassword || that_present_dbPassword) {
      if (!(this_present_dbPassword && that_present_dbPassword))
        return false;
      if (!this.dbPassword.equals(that.dbPassword))
        return false;
    }

    boolean this_present_dbPoolSize = true && this.isSetDbPoolSize();
    boolean that_present_dbPoolSize = true && that.isSetDbPoolSize();
    if (this_present_dbPoolSize || that_present_dbPoolSize) {
      if (!(this_present_dbPoolSize && that_present_dbPoolSize))
        return false;
      if (this.dbPoolSize != that.dbPoolSize)
        return false;
    }

    boolean this_present_seqId = true && this.isSetSeqId();
    boolean that_present_seqId = true && that.isSetSeqId();
    if (this_present_seqId || that_present_seqId) {
      if (!(this_present_seqId && that_present_seqId))
        return false;
      if (this.seqId != that.seqId)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_totalNodes = true && this.isSetTotalNodes();
    boolean that_present_totalNodes = true && that.isSetTotalNodes();
    if (this_present_totalNodes || that_present_totalNodes) {
      if (!(this_present_totalNodes && that_present_totalNodes))
        return false;
      if (this.totalNodes != that.totalNodes)
        return false;
    }

    boolean this_present_hbaseMaster = true && this.isSetHbaseMaster();
    boolean that_present_hbaseMaster = true && that.isSetHbaseMaster();
    if (this_present_hbaseMaster || that_present_hbaseMaster) {
      if (!(this_present_hbaseMaster && that_present_hbaseMaster))
        return false;
      if (!this.hbaseMaster.equals(that.hbaseMaster))
        return false;
    }

    boolean this_present_zkQuorum = true && this.isSetZkQuorum();
    boolean that_present_zkQuorum = true && that.isSetZkQuorum();
    if (this_present_zkQuorum || that_present_zkQuorum) {
      if (!(this_present_zkQuorum && that_present_zkQuorum))
        return false;
      if (!this.zkQuorum.equals(that.zkQuorum))
        return false;
    }

    boolean this_present_zkClientPort = true && this.isSetZkClientPort();
    boolean that_present_zkClientPort = true && that.isSetZkClientPort();
    if (this_present_zkClientPort || that_present_zkClientPort) {
      if (!(this_present_zkClientPort && that_present_zkClientPort))
        return false;
      if (this.zkClientPort != that.zkClientPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GlobalConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer()).compareTo(other.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, other.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocal()).compareTo(other.isSetProtocal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocal, other.protocal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadNum()).compareTo(other.isSetThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadNum, other.threadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpProxys()).compareTo(other.isSetHttpProxys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpProxys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpProxys, other.httpProxys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisk()).compareTo(other.isSetDisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk, other.disk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSync()).compareTo(other.isSetIsSync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSync, other.isSync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncDomain()).compareTo(other.isSetSyncDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncDomain, other.syncDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbDriver()).compareTo(other.isSetDbDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbDriver, other.dbDriver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbUrl()).compareTo(other.isSetDbUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbUrl, other.dbUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbUsername()).compareTo(other.isSetDbUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbUsername, other.dbUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbPassword()).compareTo(other.isSetDbPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbPassword, other.dbPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbPoolSize()).compareTo(other.isSetDbPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbPoolSize, other.dbPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqId()).compareTo(other.isSetSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqId, other.seqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNodes()).compareTo(other.isSetTotalNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNodes, other.totalNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbaseMaster()).compareTo(other.isSetHbaseMaster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbaseMaster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbaseMaster, other.hbaseMaster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZkQuorum()).compareTo(other.isSetZkQuorum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZkQuorum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zkQuorum, other.zkQuorum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZkClientPort()).compareTo(other.isSetZkClientPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZkClientPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zkClientPort, other.zkClientPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GlobalConfig(");
    boolean first = true;

    if (isSetPort()) {
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (isSetServer()) {
      if (!first) sb.append(", ");
      sb.append("server:");
      if (this.server == null) {
        sb.append("null");
      } else {
        sb.append(this.server);
      }
      first = false;
    }
    if (isSetProtocal()) {
      if (!first) sb.append(", ");
      sb.append("protocal:");
      if (this.protocal == null) {
        sb.append("null");
      } else {
        sb.append(this.protocal);
      }
      first = false;
    }
    if (isSetThreadNum()) {
      if (!first) sb.append(", ");
      sb.append("threadNum:");
      sb.append(this.threadNum);
      first = false;
    }
    if (isSetHttpProxys()) {
      if (!first) sb.append(", ");
      sb.append("httpProxys:");
      if (this.httpProxys == null) {
        sb.append("null");
      } else {
        sb.append(this.httpProxys);
      }
      first = false;
    }
    if (isSetDisk()) {
      if (!first) sb.append(", ");
      sb.append("disk:");
      if (this.disk == null) {
        sb.append("null");
      } else {
        sb.append(this.disk);
      }
      first = false;
    }
    if (isSetIsSync()) {
      if (!first) sb.append(", ");
      sb.append("isSync:");
      sb.append(this.isSync);
      first = false;
    }
    if (isSetSyncDomain()) {
      if (!first) sb.append(", ");
      sb.append("syncDomain:");
      if (this.syncDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.syncDomain);
      }
      first = false;
    }
    if (isSetIndex()) {
      if (!first) sb.append(", ");
      sb.append("index:");
      if (this.index == null) {
        sb.append("null");
      } else {
        sb.append(this.index);
      }
      first = false;
    }
    if (isSetDbDriver()) {
      if (!first) sb.append(", ");
      sb.append("dbDriver:");
      if (this.dbDriver == null) {
        sb.append("null");
      } else {
        sb.append(this.dbDriver);
      }
      first = false;
    }
    if (isSetDbUrl()) {
      if (!first) sb.append(", ");
      sb.append("dbUrl:");
      if (this.dbUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.dbUrl);
      }
      first = false;
    }
    if (isSetDbUsername()) {
      if (!first) sb.append(", ");
      sb.append("dbUsername:");
      if (this.dbUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.dbUsername);
      }
      first = false;
    }
    if (isSetDbPassword()) {
      if (!first) sb.append(", ");
      sb.append("dbPassword:");
      if (this.dbPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.dbPassword);
      }
      first = false;
    }
    if (isSetDbPoolSize()) {
      if (!first) sb.append(", ");
      sb.append("dbPoolSize:");
      sb.append(this.dbPoolSize);
      first = false;
    }
    if (isSetSeqId()) {
      if (!first) sb.append(", ");
      sb.append("seqId:");
      sb.append(this.seqId);
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetTotalNodes()) {
      if (!first) sb.append(", ");
      sb.append("totalNodes:");
      sb.append(this.totalNodes);
      first = false;
    }
    if (isSetHbaseMaster()) {
      if (!first) sb.append(", ");
      sb.append("hbaseMaster:");
      if (this.hbaseMaster == null) {
        sb.append("null");
      } else {
        sb.append(this.hbaseMaster);
      }
      first = false;
    }
    if (isSetZkQuorum()) {
      if (!first) sb.append(", ");
      sb.append("zkQuorum:");
      if (this.zkQuorum == null) {
        sb.append("null");
      } else {
        sb.append(this.zkQuorum);
      }
      first = false;
    }
    if (isSetZkClientPort()) {
      if (!first) sb.append(", ");
      sb.append("zkClientPort:");
      sb.append(this.zkClientPort);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GlobalConfigStandardSchemeFactory implements SchemeFactory {
    public GlobalConfigStandardScheme getScheme() {
      return new GlobalConfigStandardScheme();
    }
  }

  private static class GlobalConfigStandardScheme extends StandardScheme<GlobalConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GlobalConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server = iprot.readString();
              struct.setServerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROTOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocal = iprot.readString();
              struct.setProtocalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadNum = iprot.readI32();
              struct.setThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HTTP_PROXYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.httpProxys = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.httpProxys.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setHttpProxysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.disk = iprot.readString();
              struct.setDiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_SYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSync = iprot.readBool();
              struct.setIsSyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SYNC_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncDomain = iprot.readString();
              struct.setSyncDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index = iprot.readString();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DB_DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbDriver = iprot.readString();
              struct.setDbDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbUrl = iprot.readString();
              struct.setDbUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DB_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbUsername = iprot.readString();
              struct.setDbUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DB_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbPassword = iprot.readString();
              struct.setDbPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DB_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dbPoolSize = iprot.readI32();
              struct.setDbPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seqId = iprot.readI32();
              struct.setSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TOTAL_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalNodes = iprot.readI32();
              struct.setTotalNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HBASE_MASTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hbaseMaster = iprot.readString();
              struct.setHbaseMasterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ZK_QUORUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zkQuorum = iprot.readString();
              struct.setZkQuorumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ZK_CLIENT_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zkClientPort = iprot.readI32();
              struct.setZkClientPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GlobalConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.server != null) {
        if (struct.isSetServer()) {
          oprot.writeFieldBegin(SERVER_FIELD_DESC);
          oprot.writeString(struct.server);
          oprot.writeFieldEnd();
        }
      }
      if (struct.protocal != null) {
        if (struct.isSetProtocal()) {
          oprot.writeFieldBegin(PROTOCAL_FIELD_DESC);
          oprot.writeString(struct.protocal);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThreadNum()) {
        oprot.writeFieldBegin(THREAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.threadNum);
        oprot.writeFieldEnd();
      }
      if (struct.httpProxys != null) {
        if (struct.isSetHttpProxys()) {
          oprot.writeFieldBegin(HTTP_PROXYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.httpProxys.size()));
            for (String _iter27 : struct.httpProxys)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.disk != null) {
        if (struct.isSetDisk()) {
          oprot.writeFieldBegin(DISK_FIELD_DESC);
          oprot.writeString(struct.disk);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSync()) {
        oprot.writeFieldBegin(IS_SYNC_FIELD_DESC);
        oprot.writeBool(struct.isSync);
        oprot.writeFieldEnd();
      }
      if (struct.syncDomain != null) {
        if (struct.isSetSyncDomain()) {
          oprot.writeFieldBegin(SYNC_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.syncDomain);
          oprot.writeFieldEnd();
        }
      }
      if (struct.index != null) {
        if (struct.isSetIndex()) {
          oprot.writeFieldBegin(INDEX_FIELD_DESC);
          oprot.writeString(struct.index);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbDriver != null) {
        if (struct.isSetDbDriver()) {
          oprot.writeFieldBegin(DB_DRIVER_FIELD_DESC);
          oprot.writeString(struct.dbDriver);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbUrl != null) {
        if (struct.isSetDbUrl()) {
          oprot.writeFieldBegin(DB_URL_FIELD_DESC);
          oprot.writeString(struct.dbUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbUsername != null) {
        if (struct.isSetDbUsername()) {
          oprot.writeFieldBegin(DB_USERNAME_FIELD_DESC);
          oprot.writeString(struct.dbUsername);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbPassword != null) {
        if (struct.isSetDbPassword()) {
          oprot.writeFieldBegin(DB_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.dbPassword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDbPoolSize()) {
        oprot.writeFieldBegin(DB_POOL_SIZE_FIELD_DESC);
        oprot.writeI32(struct.dbPoolSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSeqId()) {
        oprot.writeFieldBegin(SEQ_ID_FIELD_DESC);
        oprot.writeI32(struct.seqId);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalNodes()) {
        oprot.writeFieldBegin(TOTAL_NODES_FIELD_DESC);
        oprot.writeI32(struct.totalNodes);
        oprot.writeFieldEnd();
      }
      if (struct.hbaseMaster != null) {
        if (struct.isSetHbaseMaster()) {
          oprot.writeFieldBegin(HBASE_MASTER_FIELD_DESC);
          oprot.writeString(struct.hbaseMaster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.zkQuorum != null) {
        if (struct.isSetZkQuorum()) {
          oprot.writeFieldBegin(ZK_QUORUM_FIELD_DESC);
          oprot.writeString(struct.zkQuorum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetZkClientPort()) {
        oprot.writeFieldBegin(ZK_CLIENT_PORT_FIELD_DESC);
        oprot.writeI32(struct.zkClientPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GlobalConfigTupleSchemeFactory implements SchemeFactory {
    public GlobalConfigTupleScheme getScheme() {
      return new GlobalConfigTupleScheme();
    }
  }

  private static class GlobalConfigTupleScheme extends TupleScheme<GlobalConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GlobalConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPort()) {
        optionals.set(0);
      }
      if (struct.isSetServer()) {
        optionals.set(1);
      }
      if (struct.isSetProtocal()) {
        optionals.set(2);
      }
      if (struct.isSetThreadNum()) {
        optionals.set(3);
      }
      if (struct.isSetHttpProxys()) {
        optionals.set(4);
      }
      if (struct.isSetDisk()) {
        optionals.set(5);
      }
      if (struct.isSetIsSync()) {
        optionals.set(6);
      }
      if (struct.isSetSyncDomain()) {
        optionals.set(7);
      }
      if (struct.isSetIndex()) {
        optionals.set(8);
      }
      if (struct.isSetDbDriver()) {
        optionals.set(9);
      }
      if (struct.isSetDbUrl()) {
        optionals.set(10);
      }
      if (struct.isSetDbUsername()) {
        optionals.set(11);
      }
      if (struct.isSetDbPassword()) {
        optionals.set(12);
      }
      if (struct.isSetDbPoolSize()) {
        optionals.set(13);
      }
      if (struct.isSetSeqId()) {
        optionals.set(14);
      }
      if (struct.isSetAddress()) {
        optionals.set(15);
      }
      if (struct.isSetTotalNodes()) {
        optionals.set(16);
      }
      if (struct.isSetHbaseMaster()) {
        optionals.set(17);
      }
      if (struct.isSetZkQuorum()) {
        optionals.set(18);
      }
      if (struct.isSetZkClientPort()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetServer()) {
        oprot.writeString(struct.server);
      }
      if (struct.isSetProtocal()) {
        oprot.writeString(struct.protocal);
      }
      if (struct.isSetThreadNum()) {
        oprot.writeI32(struct.threadNum);
      }
      if (struct.isSetHttpProxys()) {
        {
          oprot.writeI32(struct.httpProxys.size());
          for (String _iter28 : struct.httpProxys)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetDisk()) {
        oprot.writeString(struct.disk);
      }
      if (struct.isSetIsSync()) {
        oprot.writeBool(struct.isSync);
      }
      if (struct.isSetSyncDomain()) {
        oprot.writeString(struct.syncDomain);
      }
      if (struct.isSetIndex()) {
        oprot.writeString(struct.index);
      }
      if (struct.isSetDbDriver()) {
        oprot.writeString(struct.dbDriver);
      }
      if (struct.isSetDbUrl()) {
        oprot.writeString(struct.dbUrl);
      }
      if (struct.isSetDbUsername()) {
        oprot.writeString(struct.dbUsername);
      }
      if (struct.isSetDbPassword()) {
        oprot.writeString(struct.dbPassword);
      }
      if (struct.isSetDbPoolSize()) {
        oprot.writeI32(struct.dbPoolSize);
      }
      if (struct.isSetSeqId()) {
        oprot.writeI32(struct.seqId);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetTotalNodes()) {
        oprot.writeI32(struct.totalNodes);
      }
      if (struct.isSetHbaseMaster()) {
        oprot.writeString(struct.hbaseMaster);
      }
      if (struct.isSetZkQuorum()) {
        oprot.writeString(struct.zkQuorum);
      }
      if (struct.isSetZkClientPort()) {
        oprot.writeI32(struct.zkClientPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GlobalConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(1)) {
        struct.server = iprot.readString();
        struct.setServerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.protocal = iprot.readString();
        struct.setProtocalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.threadNum = iprot.readI32();
        struct.setThreadNumIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.httpProxys = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31;
            _elem31 = iprot.readString();
            struct.httpProxys.add(_elem31);
          }
        }
        struct.setHttpProxysIsSet(true);
      }
      if (incoming.get(5)) {
        struct.disk = iprot.readString();
        struct.setDiskIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isSync = iprot.readBool();
        struct.setIsSyncIsSet(true);
      }
      if (incoming.get(7)) {
        struct.syncDomain = iprot.readString();
        struct.setSyncDomainIsSet(true);
      }
      if (incoming.get(8)) {
        struct.index = iprot.readString();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dbDriver = iprot.readString();
        struct.setDbDriverIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dbUrl = iprot.readString();
        struct.setDbUrlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dbUsername = iprot.readString();
        struct.setDbUsernameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dbPassword = iprot.readString();
        struct.setDbPasswordIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dbPoolSize = iprot.readI32();
        struct.setDbPoolSizeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.seqId = iprot.readI32();
        struct.setSeqIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(16)) {
        struct.totalNodes = iprot.readI32();
        struct.setTotalNodesIsSet(true);
      }
      if (incoming.get(17)) {
        struct.hbaseMaster = iprot.readString();
        struct.setHbaseMasterIsSet(true);
      }
      if (incoming.get(18)) {
        struct.zkQuorum = iprot.readString();
        struct.setZkQuorumIsSet(true);
      }
      if (incoming.get(19)) {
        struct.zkClientPort = iprot.readI32();
        struct.setZkClientPortIsSet(true);
      }
    }
  }

}

