/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ganqiang.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ganqiang.thrift.PingResponse;

public class PingResponse implements org.apache.thrift.TBase<PingResponse, PingResponse._Fields>, java.io.Serializable, Cloneable, Comparable<PingResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PingResponse");

  private static final org.apache.thrift.protocol.TField CPURATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpurate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMRATE_FIELD_DESC = new org.apache.thrift.protocol.TField("memrate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PingResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PingResponseTupleSchemeFactory());
  }

  public String cpurate; // required
  public String memrate; // required
  public String os; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPURATE((short)1, "cpurate"),
    MEMRATE((short)2, "memrate"),
    OS((short)3, "os");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPURATE
          return CPURATE;
        case 2: // MEMRATE
          return MEMRATE;
        case 3: // OS
          return OS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPURATE, new org.apache.thrift.meta_data.FieldMetaData("cpurate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMRATE, new org.apache.thrift.meta_data.FieldMetaData("memrate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PingResponse.class, metaDataMap);
  }

  public PingResponse() {
  }

  public PingResponse(
    String cpurate,
    String memrate,
    String os)
  {
    this();
    this.cpurate = cpurate;
    this.memrate = memrate;
    this.os = os;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PingResponse(PingResponse other) {
    if (other.isSetCpurate()) {
      this.cpurate = other.cpurate;
    }
    if (other.isSetMemrate()) {
      this.memrate = other.memrate;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
  }

  public PingResponse deepCopy() {
    return new PingResponse(this);
  }

  @Override
  public void clear() {
    this.cpurate = null;
    this.memrate = null;
    this.os = null;
  }

  public String getCpurate() {
    return this.cpurate;
  }

  public PingResponse setCpurate(String cpurate) {
    this.cpurate = cpurate;
    return this;
  }

  public void unsetCpurate() {
    this.cpurate = null;
  }

  /** Returns true if field cpurate is set (has been assigned a value) and false otherwise */
  public boolean isSetCpurate() {
    return this.cpurate != null;
  }

  public void setCpurateIsSet(boolean value) {
    if (!value) {
      this.cpurate = null;
    }
  }

  public String getMemrate() {
    return this.memrate;
  }

  public PingResponse setMemrate(String memrate) {
    this.memrate = memrate;
    return this;
  }

  public void unsetMemrate() {
    this.memrate = null;
  }

  /** Returns true if field memrate is set (has been assigned a value) and false otherwise */
  public boolean isSetMemrate() {
    return this.memrate != null;
  }

  public void setMemrateIsSet(boolean value) {
    if (!value) {
      this.memrate = null;
    }
  }

  public String getOs() {
    return this.os;
  }

  public PingResponse setOs(String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CPURATE:
      if (value == null) {
        unsetCpurate();
      } else {
        setCpurate((String)value);
      }
      break;

    case MEMRATE:
      if (value == null) {
        unsetMemrate();
      } else {
        setMemrate((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CPURATE:
      return getCpurate();

    case MEMRATE:
      return getMemrate();

    case OS:
      return getOs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CPURATE:
      return isSetCpurate();
    case MEMRATE:
      return isSetMemrate();
    case OS:
      return isSetOs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PingResponse)
      return this.equals((PingResponse)that);
    return false;
  }

  public boolean equals(PingResponse that) {
    if (that == null)
      return false;

    boolean this_present_cpurate = true && this.isSetCpurate();
    boolean that_present_cpurate = true && that.isSetCpurate();
    if (this_present_cpurate || that_present_cpurate) {
      if (!(this_present_cpurate && that_present_cpurate))
        return false;
      if (!this.cpurate.equals(that.cpurate))
        return false;
    }

    boolean this_present_memrate = true && this.isSetMemrate();
    boolean that_present_memrate = true && that.isSetMemrate();
    if (this_present_memrate || that_present_memrate) {
      if (!(this_present_memrate && that_present_memrate))
        return false;
      if (!this.memrate.equals(that.memrate))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PingResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCpurate()).compareTo(other.isSetCpurate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpurate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpurate, other.cpurate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemrate()).compareTo(other.isSetMemrate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemrate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memrate, other.memrate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PingResponse(");
    boolean first = true;

    sb.append("cpurate:");
    if (this.cpurate == null) {
      sb.append("null");
    } else {
      sb.append(this.cpurate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memrate:");
    if (this.memrate == null) {
      sb.append("null");
    } else {
      sb.append(this.memrate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("os:");
    if (this.os == null) {
      sb.append("null");
    } else {
      sb.append(this.os);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (cpurate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpurate' was not present! Struct: " + toString());
    }
    if (memrate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memrate' was not present! Struct: " + toString());
    }
    if (os == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'os' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PingResponseStandardSchemeFactory implements SchemeFactory {
    public PingResponseStandardScheme getScheme() {
      return new PingResponseStandardScheme();
    }
  }

  private static class PingResponseStandardScheme extends StandardScheme<PingResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PingResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPURATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpurate = iprot.readString();
              struct.setCpurateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMRATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memrate = iprot.readString();
              struct.setMemrateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PingResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cpurate != null) {
        oprot.writeFieldBegin(CPURATE_FIELD_DESC);
        oprot.writeString(struct.cpurate);
        oprot.writeFieldEnd();
      }
      if (struct.memrate != null) {
        oprot.writeFieldBegin(MEMRATE_FIELD_DESC);
        oprot.writeString(struct.memrate);
        oprot.writeFieldEnd();
      }
      if (struct.os != null) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeString(struct.os);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PingResponseTupleSchemeFactory implements SchemeFactory {
    public PingResponseTupleScheme getScheme() {
      return new PingResponseTupleScheme();
    }
  }

  private static class PingResponseTupleScheme extends TupleScheme<PingResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PingResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.cpurate);
      oprot.writeString(struct.memrate);
      oprot.writeString(struct.os);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PingResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.cpurate = iprot.readString();
      struct.setCpurateIsSet(true);
      struct.memrate = iprot.readString();
      struct.setMemrateIsSet(true);
      struct.os = iprot.readString();
      struct.setOsIsSet(true);
    }
  }

}

